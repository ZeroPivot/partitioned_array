# Array-of-hashes container
class AOH
  @collection: untyped

  @path_to_root: untyped

  def initialize: (*untyped args) -> void

  def add: (untyped hash) -> untyped

  def reverse_add: (untyped hash) -> untyped

  def collection_get: () -> untyped

  def first: () -> untyped

  def last: () -> untyped

  def max: () -> untyped

  def swap_id: (id_a: untyped, id_b: untyped) -> (false | true)

  def clear_then_save: () -> nil

  # or nil to get all ---- THIS IS WHERE you may have to make a modification on the return of @collection[id]
  def get_id: (?untyped? id) -> (nil | untyped | nil | untyped)

  def set_id: (untyped id) ?{ (?) -> untyped } -> untyped

  def rem_by_id: (untyped id) -> untyped

  def each_with_index: () ?{ (untyped) -> untyped } -> untyped

  def map: () ?{ (?) -> untyped } -> untyped

  def each: () -> untyped

  def print_all: () -> untyped

  def self.save: (?aoh: untyped?, ?file_location: ::String) -> untyped

  def self.touch!: (?file_location: ::String) -> (untyped | nil)

  def save!: (?file_location: ::String, ?aoh: untyped?) -> untyped

  # save no matter what
  def self.save!: (?aoh: untyped, ?file_location: untyped?) -> untyped

  # factory method; returns an AOH object with those specific array-of-hashes (will create a new file if file does not exist; use iff certain that you know what file you're loading)
  def self.load!: (?aoh: untyped, ?file_location: untyped?, ?s_self: untyped?) -> untyped

  # factory method; returns an AOH object with those specific array-of-hashes
  def self.load: (?file_location: ::String) -> untyped
end
