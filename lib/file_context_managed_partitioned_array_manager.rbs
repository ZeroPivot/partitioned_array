# FileContextManagedPartitionedArrayManager - manages the FileContextManagedPartitionedArray and its partitions, making the Partitioned Array a database with database IDs
# and table keys
class FileContextManagedPartitionedArrayManager
  @fcmpa_db_partition_archive_id: untyped

  @fcmpa_db_endless_add: untyped

  @fcmpa_db_partition_amount_and_offset: untyped

  @fcmpa_db_max_capacity: untyped

  @fcmpa_db_index_location: untyped

  @fcmpa_db_size: untyped

  @fcmpa_db_indexer_name: untyped

  @fcmpa_db_folder_name: untyped

  @fcmpa_db_partition_addition_amount: untyped

  @fcmpa_db_has_capacity: untyped

  @fcmpa_db_dynamically_allocates: untyped

  @fcmpa_db_traverse_hash: untyped

  # The database which holds all the entries that the manager database manages
  @db_has_capacity: untyped

  @db_endless_add: untyped

  @db_size: untyped

  @db_path: untyped

  @db_name: untyped

  @db_dynamically_allocates: untyped

  @db_partition_amount_and_offset: untyped

  @db_max_capacity: untyped

  @db_partition_addition_amount: untyped

  @db_partition_archive_id: untyped

  @db_traverse_hash: untyped

  @initial_autosave: untyped

  @active_table: untyped

  @active_database: untyped

  @label_integer: untyped

  @label_ranges: untyped

  @traverse_hash: untyped

  # puts @db_partition_addition_amount
  @timestamp_str: untyped

  # p "FCMPA: #{@label_integer}"
  @man_index: untyped

  # a man_db entry for every single database table, while man_index maintains the link between the manager database and the database tables
  @man_db: untyped

  attr_accessor man_db: untyped

  attr_accessor man_index: untyped

  attr_accessor fcmpa_db_indexer_db: untyped

  attr_accessor fcmpa_active_databases: untyped

  attr_accessor db_file_incrementor: untyped

  attr_accessor db_file_location: untyped

  attr_accessor db_path: untyped

  attr_accessor db_name: untyped

  attr_accessor db_size: untyped

  attr_accessor db_endless_add: untyped

  attr_accessor db_has_capacity: untyped

  attr_accessor fcmpa_db_indexer_name: untyped

  attr_accessor fcmpa_db_folder_name: untyped

  attr_accessor fcmpa_db_size: untyped

  attr_accessor fcmpa_partition_amount_and_offset: untyped

  attr_accessor db_partition_amount_and_offset: untyped

  attr_accessor partition_addition_amount: untyped

  attr_accessor db_dynamically_allocates: untyped

  attr_accessor timestamp_str: untyped

  INDEX: 0

  # DB_SIZE > PARTITION_AMOUNT
  TRAVERSE_HASH: true

  FCMPA_PARTITION_AMOUNT: 9

  FCMPA_OFFSET: 1

  FCMPA_DB_ENDLESS_ADD: true

  FCMPA_DB_DYNAMICALLY_ALLOCATES: true

  FCMPA_DB_PARTITION_ADDITION_AMOUNT: 5

  FCMPA_DB_HAS_CAPACITY: true

  FCMPA_DB_MAX_CAPACITY: "data_arr_size"

  FCMPA_DB_INDEXER_NAME: "FCMPA_DB_INDEX"

  FCMPA_DB_FOLDER_NAME: "./DB/FCMPAM_DB_INDEX"

  FCMPA_DB_PARTITION_ARCHIVE_ID: 0

  FCMPA_DB_SIZE: 20

  FCMPA_DB_INDEX_LOCATION: 0

  FCMPA_DB_TRAVERSE_HASH: true

  DB_PARTITION_AMOUNT: 9

  DB_PARTITION_OFFSET: 1

  DB_NAME: "FCMPA_DB"

  DB_PATH: "./DB/FCMPAM_DB"

  DB_HAS_CAPACITY: true

  DB_DYNAMICALLY_ALLOCATES: true

  DB_ENDLESS_ADD: true

  DB_MAX_CAPACITY: "data_arr_size"

  DB_PARTITION_ARCHIVE_ID: 0

  DB_SIZE: 20

  DB_PARTITION_ADDITION_AMOUNT: 5

  DB_TRAVERSE_HASH: true

  INITIAL_AUTOSAVE: true

  DATABASE_LIST_NAME: "_DATABASE_LIST_INDEX"

  LABEL_INTEGER: false

  LABEL_RANGES: false

  def initialize: (?db_max_capacity: untyped, ?db_size: untyped, ?db_endless_add: untyped, ?db_has_capacity: untyped, ?db_name: untyped, ?db_path: untyped, ?db_partition_addition_amount: untyped, ?db_dynamically_allocates: untyped, ?db_partition_amount_and_offset: untyped, ?db_partition_archive_id: untyped, ?db_traverse_hash: untyped, ?fcmpa_db_size: untyped, ?fcmpa_db_indexer_name: untyped, ?fcmpa_db_index_location: untyped, ?fcmpa_db_folder_name: untyped, ?fcmpa_db_partition_amount_and_offset: untyped, ?fcmpa_db_has_capacity: untyped, ?fcmpa_db_partition_addition_amount: untyped, ?fcmpa_db_dynamically_allocates: untyped, ?fcmpa_db_endless_add: untyped, ?fcmpa_db_max_capacity: untyped, ?fcmpa_db_partition_archive_id: untyped, ?fcmpa_db_traverse_hash: untyped, ?initial_autosave: untyped, ?active_database: untyped?, ?active_table: untyped?, ?traverse_hash: untyped, ?label_integer: untyped, ?label_ranges: untyped) -> void

  # gets the database object for the database_name (@man_index = database index; @man_db = database table)
  def database: (?untyped database_name) -> untyped

  # gets the database table object for the database_table name, not needing a database x index pair
  def table: (?untyped database_table) -> untyped

  # set the active database table variable to avoid redundant typing
  def active_table: (untyped database_table) -> untyped

  # set the active database variable to avoid redundant typing
  def active_database: (untyped active_database) -> untyped

  def existing_database_tables?: (?database_name: untyped) -> untyped

  def []: (?untyped database_name, ?untyped database_table) -> untyped

  # gets the database table object for the database_table name, needing a database x index pair
  def database_table: (?database_name: untyped, ?database_table: untyped) -> (untyped | nil)

  # Lower level work that works with class variables within fcmpa_active_databases. In particular, the MPA within @man_db.fcmpa_active_databases[database_table]
  def table_set_file_context!: (?database_table: untyped, ?database_name: untyped, ?file_context_id: untyped, ?save_prior: bool, ?save_after: bool) -> untyped

  # sets the particular MPA running within the database as database_table to the next file context
  # lower level work that deals with class variables within fcmpa_active_databases
  def table_next_file_context!: (?database_table: untyped, ?database_name: untyped, ?save_prior: bool, ?save_after: bool) -> untyped

  # update: left off worrying about the db_table_name entry having to contain an array of the table names so that the database knows which tables to look for and which ones belong to it
  # left off working with new_table, and, setting the table apart from the database and placing them into independent folders (the problem is file locations)
  def new_table!: (database_table: untyped, database_name: untyped, ?initial_autosave: untyped) -> untyped

  def delete_database_index_entry!: (untyped database_name) -> untyped

  # untested (1/12/2023 - 2:07PM)
  def delete_database!: (untyped database_name) -> untyped

  # untested (1/12/2023 - 2:07PM)
  def delete_table!: (untyped database_table) -> untyped

  # the index is the database name, and man_db maintains the databases defined by the index
  def new_database!: (untyped database_name) -> untyped

  alias db_table database_table

  alias active_db active_database

  alias new_db! new_database!

  alias new_tbl! new_table!
end
