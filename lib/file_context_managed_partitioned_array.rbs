# VERSION v1.1.0-release - CRITICAL BUG FIXES:
# @fcmpa_db_max_capacity was not being set correctly (it was @fcmpa_db__max_capacity)
# TODO: implement folder removal mechanism in FCMPA#delete_database! for DragonRuby
# VERSION v1.0.1a - organized, prettified, and corrected one bug, or possible bug (1/3/2022 3:08PM)
# TODO: Study this code a bit and describe the architecture further, its a bit confusing going down this low level with the partitioned arrays.
# DONE: Prettify code, reduce linter warnings, and organize variables
# VERSION v1.0.0a - organized, prettified, and corrected one bug, or possible bug
# version 1.0.0a is battle test ready, and is simply a bootstrap for the FCMPAM
# VERSION v0.2.8 - reduced redundancy that happened by accident
# VERSION v0.2.7a - organized variables, fixed database overwrite bug, which was just giving each database "table" in the file heiratchy the name of itself
# VERSION v0.2.6 - organized variables, some debugging to make sure everything is set correctly initially - 11:31AM
# VERSION v0.2.5 - 2022-12-05 10:10AM
# FileContextManagedPartitionedArray
#  A ManagedPartitionedArray that uses a FileContext to store its data.
# Fixed variable definitions and usage locations; program works as it did in an earlier version without the variable misuse and collisions.
# VERSION v0.2.4
# VERSION v0.2.3 - the basics are working
# VERSION v0.2.2 - left off working on start_database! -- turns out that
# this class requires more work before the partitioned array manager will.
# VERSION v0.2.1
# VERSION v0.2.0a - release test run
# VERSION v0.2.3
# VERSION v0.2.2a (11/27/2022 - 10:20am)
# VERSION v0.2.1a (11/27/2022 - 6:25am)
# VERSION v0.2.0a
# Refining before field testing
class FileContextManagedPartitionedArray
  @traverse_hash: untyped

  @raise_on_no_db: untyped

  @db_max_capacity: untyped

  @db_partition_amount_and_offset: untyped

  @db_dynamically_allocates: untyped

  @db_has_capacity: untyped

  @db_endless_add: untyped

  @db_partition_addition_amount: untyped

  @db_size: untyped

  @db_path: untyped

  @db_name: untyped

  @db_partition_archive_id: untyped

  @fcmpa_db_dynamically_allocates: untyped

  @fcmpa_db_indexer_name: untyped

  @fcmpa_db_folder_name: untyped

  @fcmpa_db_size: untyped

  @fcmpa_db_endless_add: untyped

  @fcmpa_db_has_capacity: untyped

  @fcmpa_db_partition_addition_amount: untyped

  @fcmpa_db_max_capacity: untyped

  @fcmpa_db_partition_amount_and_offset: untyped

  @fcmpa_db_partition_archive_id: untyped

  @fcmpa_db_index_location: untyped

  @fcmpa_active_databases: untyped

  @fcmpa_db_indexer_db: untyped

  @timestamp_str: untyped

  @label_integer: untyped

  @label_ranges: untyped

  @active_database: untyped

  attr_accessor fcmpa_db_indexer_db: untyped

  attr_accessor fcmpa_active_databases: untyped

  attr_accessor active_database: untyped

  attr_accessor db_file_incrementor: untyped

  attr_accessor db_file_location: untyped

  attr_accessor db_path: untyped

  attr_accessor db_name: untyped

  attr_accessor db_size: untyped

  attr_accessor db_endless_add: untyped

  attr_accessor db_has_capacity: untyped

  attr_accessor fcmpa_db_indexer_name: untyped

  attr_accessor fcmpa_db_folder_name: untyped

  attr_accessor fcmpa_db_size: untyped

  attr_accessor fcmpa_partition_amount_and_offset: untyped

  attr_accessor db_partition_amount_and_offset: untyped

  attr_accessor partition_addition_amount: untyped

  attr_accessor db_dynamically_allocates: untyped

  attr_accessor timestamp_str: untyped

  # DB_SIZE > PARTITION_AMOUNT
  DB_SIZE: 20

  DB_MAX_CAPACITY: "data_arr_size"

  DB_PARTITION_AMOUNT: 9

  DB_PARTITION_OFFSET: 1

  DB_PARTITION_ADDITION_AMOUNT: 5

  DB_NAME: "fcmpa_db"

  DB_PATH: "./DB/FCMPA_DB"

  DB_HAS_CAPACITY: false

  DB_DYNAMICALLY_ALLOCATES: true

  DB_ENDLESS_ADD: true

  DB_PARTITION_ARCHIVE_ID: 0

  FCMPA_DB_SIZE: 20

  FCMPA_DB_ENDLESS_ADD: true

  FCMPA_DB_DYNAMICALLY_ALLOCATES: true

  FCMPA_DB_PARTITION_ADDITION_AMOUNT: 5

  FCMPA_DB_HAS_CAPACITY: false

  FCMPA_DB_INDEXER_NAME: "FCMPA_DB_INDEX"

  FCMPA_DB_FOLDER_NAME: "./DB/FCMPA"

  FCMPA_DB_MAX_CAPACITY: "data_arr_size"

  FCMPA_DB_PARTITION_ARCHIVE_ID: 0

  FCMPA_DB_PARTITION_AMOUNT: 9

  FCMPA_DB_OFFSET: 1

  FCMPA_DB_INDEX_LOCATION: 0

  LABEL_INTEGER: false

  LABEL_RANGES: false

  TRAVERSE_HASH: true

  DEBUG: true

  RAISE_ON_NO_DB: false

  def debug: (untyped say) -> (untyped | nil)

  def initialize: (?raise_on_no_db: untyped, ?traverse_hash: untyped, ?db_max_capacity: untyped, ?db_size: untyped, ?db_endless_add: untyped, ?db_has_capacity: untyped, ?db_name: untyped, ?db_path: untyped, ?db_partition_amount_and_offset: untyped, ?db_dynamically_allocates: untyped, ?db_partition_addition_amount: untyped, ?db_partition_archive_id: untyped, ?fcmpa_db_indexer_name: untyped, ?fcmpa_db_folder_name: untyped, ?fcmpa_db_size: untyped, ?fcmpa_db_partition_amount_and_offset: untyped, ?fcmpa_db_has_capacity: untyped, ?fcmpa_db_partition_addition_amount: untyped, ?fcmpa_db_dynamically_allocates: untyped, ?fcmpa_db_endless_add: untyped, ?fcmpa_db_max_capacity: untyped, ?fcmpa_db_partition_archive_id: untyped, ?fcmpa_db_index_location: untyped, ?label_integer: untyped, ?label_ranges: untyped) -> void

  def load_indexer_db!: () -> untyped

  def new_timestamp: () -> untyped

  # Create a new database to be stored and ran by the FCMPA
  def new_database: (untyped database_index_name_str, ?fcmpa_db_index_location: untyped, ?db_name: untyped, ?db_path: untyped, ?initial_autosave: bool) -> (false | true)

  def []: (untyped database_index_name) -> untyped

  def delete_database_from_index!: (untyped database_index_name, ?fcmpa_db_index_location: untyped) -> untyped

  def add_database_to_index: (untyped database_index_name, untyped database_path, untyped database_name, ?fcmpa_db_index_location: untyped) -> untyped

  def db: (?untyped database_index_name) -> untyped

  def set_active_database: (untyped database_index_name) -> untyped

  def stop_database!: (untyped database_index_name) -> untyped

  # left off making it so that the database auto allocates and auto loads and saves on call
  def start_database!: (untyped database_index_name, ?raise_on_no_db: bool, ?db_name: untyped, ?db_path: untyped) -> untyped

  # ! denotes that this is an action that will be performed on the database and not a query
  def stop_databases!: () -> untyped

  def save_database!: (?untyped database_index_name) -> untyped

  def save_databases!: () -> untyped

  def load_database!: (?untyped database_index_name) -> untyped

  def load_databases!: () -> untyped

  def delete_database!: (?untyped database_index_name, ?delete_files: bool) -> untyped

  def get_databases_list: () -> untyped

  alias db_list get_databases_list

  def set_new_file_archive!: (?untyped database_index_name) -> untyped

  # traverses the database and yields every element in @data_arr, even nils
  def each: (untyped database_index_name, ?hash: untyped) { (untyped) -> untyped } -> (false | untyped)

  # traverses the database and returns all elements that are not nil, across all of @data_arr
  def each_not_nil: (untyped database_index_name, ?hash: untyped) { (untyped) -> untyped } -> untyped
end
