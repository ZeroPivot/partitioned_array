# VERSION v1.3.0a - endless add implementation in ManagedPartitionedArray#endless_add
# Allows the database to continuously add and allocate, as if it were a plain PartitionedArray
# NOTE: consider the idea that adding a partition may mean that it saves all variables and everything to disk
# SUGGESTION: working this out by only saving by partition, and not by the whole database
# SUGGESTION: this would mean that the database would have to be loaded from the beginning, but that's not a big deal
# VERSION v1.2.9 - fixes
# VERSION v1.2.8 - Regression and bug found and fixed; too many guard clauses at at_capacity? method (10/1/2022)
# VERSION v1.2.7 - fixed more bugs with dynamic allocation
# VERSION v1.2.6 - bug fix with array allocation given that you don't want to create file partitions (9/27/2022 - 7:09AM)
# VERSION v1.2.5 - bug fixes
# VERSION: v1.1.4 - seemed to have sorted out the file issues... but still need to test it out
# VERSION: v1.1.3
# many bug fixes; variables are now in sync with file i/o
# Stopped: problem with @latest_id not being set correctly
# working on load_from_archive! and how it will get the latest archive database and load up all the variables, only it seems
# that there is something wrong with that.
# VERSION: v1.1.2 (9/13/2022 10:17 am)
# Prettified
# Added raise to ManagedPartitionedArray#at_capacity? if @has_capacity == false
# VERSION: v1.1.1a - got rid of class variables, and things seem to be fully working now
# VERSION: v1.1.0a - fully functional, but not yet tested--test in the real world
# VERSION: v1.0.2 - more bug fixes, added a few more tests
# VERSION: v1.0.1 - bug fixes
# VERSION: v1.0.0a - fully functional at a basic level; can load archives and the max id of the archive is always available
# VERSION: v0.1.3 - file saving and other methods properly working
# VERSION: v0.1.2 - added managed databases, but need to add more logic to make it work fully
# VERSION: v0.1.1
# UPDATE 8/31/2022: @latest_id increments correctly now
# Manages the @last_entry variable, which tracks where the latest entry is, since PartitionedArray is dynamically allocated.
class ManagedPartitionedArray < PartitionedArray
  @db_path: untyped

  @db_size: untyped

  @db_name: untyped

  @partition_amount_and_offset: untyped

  @partition_archive_id: untyped

  @original_db_name: untyped

  @db_name_with_archive: untyped

  @max_capacity: untyped

  @latest_id: untyped

  # @max_capacity = max_capacity_setup! # => commented out on 10/4/2022 1:32am
  @has_capacity: untyped

  @max_partition_archive_id: untyped

  @partition_addition_amount: untyped

  @dynamically_allocates: untyped

  @endless_add: untyped

  @label_integer: untyped

  @label_ranges: untyped

  @basedir_created: untyped

  attr_accessor endless_add: untyped

  attr_accessor range_arr: untyped

  attr_accessor rel_arr: untyped

  attr_accessor db_size: untyped

  attr_accessor data_arr: untyped

  attr_accessor partition_amount_and_offset: untyped

  attr_accessor db_path: untyped

  attr_accessor db_name: untyped

  attr_accessor max_capacity: untyped

  attr_accessor has_capacity: untyped

  attr_accessor latest_id: untyped

  attr_accessor partition_archive_id: untyped

  attr_accessor max_partition_archive_id: untyped

  attr_accessor db_name_with_no_archive: untyped

  # DB_SIZE > PARTITION_AMOUNT
  PARTITION_AMOUNT: 9

  OFFSET: 1

  DB_SIZE: 20

  PARTITION_ARCHIVE_ID: 0

  DEFAULT_PATH: "./DB_TEST"

  DEBUGGING: false

  PAUSE_DEBUG: false

  DB_NAME: "partitioned_array_slice"

  PARTITION_ADDITION_AMOUNT: 1

  MAX_CAPACITY: "data_arr_size"

  HAS_CAPACITY: true

  DYNAMICALLY_ALLOCATES: true

  ENDLESS_ADD: false

  LABEL_INTEGER: false

  LABEL_RANGES: false

  def initialize: (?label_integer: untyped, ?label_ranges: untyped, ?endless_add: untyped, ?dynamically_allocates: untyped, ?partition_addition_amount: untyped, ?max_capacity: untyped, ?has_capacity: untyped, ?partition_archive_id: untyped, ?db_size: untyped, ?partition_amount_and_offset: untyped, ?db_path: untyped, ?db_name: untyped) -> void

  # iterates @data_arr
  def iterate: (?yield_id: bool) { (untyped, untyped) -> untyped } -> untyped

  def rehasher!: () -> untyped

  def save_partition_by_id_to_file!: (untyped id) -> untyped

  # probably a shallow copy if the hashes go too deep
  def replicate: () -> untyped

  # full copy but
  def replicate2: () -> untyped

  # untested - 5/8/2024 9:00AM PST -07
  def get_partition_by_id: (untyped id) -> untyped

  # be sure to add to dragonruby CODE
  # changed 2/19/2023 11:04AM
  def save_everything_to_files!: () -> untyped

  # added 2/19/2023
  # be sure to add to dragonruby CODE
  def create_basedir_once!: () -> (untyped | nil)

  # added 2/19/2023
  # be sure tto add to dragonruby library
  def create_basedir!: () -> untyped

  # changes added on 2/19/2023 11:03AM
  def initialize_max_partition_archive_id2!: () -> untyped

  def initialize_max_partition_archive_id!: () -> untyped

  # one keyword available: :data_arr_size
  def max_capacity_setup!: () -> ("data_arr_size" | untyped)

  def save_data_arr_to_disk!: () -> nil

  def dump_all_variables: () -> untyped

  # Bug fixed 2/19/2023 - removed partition_archive_id from arguments
  def archive_and_new_db!: (?label_integer: untyped, ?label_ranges: untyped, ?auto_allocate: bool, ?partition_addition_amount: untyped, ?max_capacity: untyped, ?has_capacity: untyped, ?db_size: untyped, ?partition_amount_and_offset: untyped, ?db_path: untyped, ?db_name: untyped) -> untyped

  # Bugs fixed in 2 below functions
  #  ex ManagedPartitionedArray#load_archive_no_auto_allocate!(partition_archive_id: partition_archive_id, ...)
  def load_archive_no_auto_allocate!: (?label_integer: untyped, ?label_ranges: untyped, ?has_capacity: untyped, ?dynamically_allocates: untyped, ?endless_add: untyped, ?partition_archive_id: untyped, ?db_size: untyped, ?partition_amount_and_offset: untyped, ?db_path: untyped, ?db_name: untyped, ?max_capacity: untyped, ?partition_addition_amount: untyped) -> untyped

  # Bug Fixed below; be sure to add to dragonruby
  # ex ManagedPartitionedArray#load_from_archive!(partition_archive_id: partition_archive_id, ...)
  def load_from_archive!: (?label_integer: untyped, ?label_ranges: untyped, ?has_capacity: untyped, ?dynamically_allocates: untyped, ?endless_add: untyped, ?partition_archive_id: untyped, ?db_size: untyped, ?partition_amount_and_offset: untyped, ?db_path: untyped, ?db_name: untyped, ?max_capacity: untyped, ?partition_addition_amount: untyped) -> untyped

  # Added 2/19/2023 (FileUtils.mkdir_p); this is a bug fix--add to dragonruby
  def save_last_entry_to_file!: () -> untyped

  # ### label_integer and label_ranges v2.1.1 changes end here
  # ManagedPartitionedArray#at_capacity? checks to see if the partitioned array is at its capacity. It is imperative to use this when going through an iterator.
  def at_capacity?: () -> (false | untyped)

  # added 3/11/2024 10:11PM
  def add_at_last: (?return_added_element_id: bool, ?save_on_partition_add: bool, ?save_last_entry_to_file: bool) ?{ (?) -> untyped } -> untyped

  # runtime complexity: O(n)
  def add: (?return_added_element_id: bool, ?save_on_partition_add: bool, ?save_last_entry_to_file: bool) { (?) -> untyped } -> (false | untyped)

  def load_everything_from_files!: () -> untyped

  def load_partition_from_file!: (untyped partition_id, ?load_variables: bool) -> untyped

  # save_variables: added 10/21/2022; all variables saved/loaded to disk by default, to work around an issue where I didn't realize I needed to save variables
  def save_partition_to_file!: (untyped partition_id, ?save_variables: bool) -> untyped

  def save_variables_to_disk!: () -> untyped

  def load_variables_from_disk!: () -> untyped

  def increment_max_partition_archive_id!: () -> untyped

  def save_db_name_with_no_archive_to_file!: () -> untyped

  def load_db_name_with_no_archive_from_file!: () -> untyped

  def save_has_capacity_to_file!: () -> untyped

  def save_endless_add_to_file!: () -> untyped

  def load_endless_add_from_file!: () -> untyped

  def load_has_capacity_from_file!: () -> untyped

  def load_last_entry_from_file!: () -> untyped

  def save_partition_archive_id_to_file!: () -> untyped

  def load_partition_archive_id_from_file!: () -> untyped

  def save_max_partition_archive_id_to_file!: () -> untyped

  def load_max_partition_archive_id_from_file!: () -> (untyped | 0)

  def save_max_capacity_to_file!: () -> untyped

  def load_max_capacity_from_file!: () -> untyped

  def save_partition_addition_amount_to_file!: () -> untyped

  def load_partition_addition_amount_from_file!: () -> untyped

  def db_name_with_archive: (?db_name: untyped, ?partition_archive_id: untyped) -> ::String

  def strip_archived_db_name: (?db_name: untyped) -> untyped

  alias save! save_everything_to_files!

  alias load! load_everything_from_files!
end
